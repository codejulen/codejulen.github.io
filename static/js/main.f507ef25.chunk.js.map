{"version":3,"sources":["fonts/Bemio.otf","fonts/Apercu.woff","fonts/Apercu.woff2","components/Home/logo.png","fonts/fonts.js","components/Home/index.style.js","components/Home/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","createGlobalStyle","Bemio","ApercuWoff2","ApercuWoff","HomeWrapper","styled","div","HomeTitle","h1","HomeBody","HomeLogo","img","HomeGrid","nicknames","Home","useState","nickname","setNickname","useEffect","Math","floor","random","length","Grid","container","xs","sm","src","logo","width","href","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oHAAAA,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,sC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,6mBCK5BC,kBAAf,IAIUC,IAQAC,IACAC,K,qlCChBH,IAAMC,EAAcC,IAAOC,IAAV,KAQXC,EAAYF,IAAOG,GAAV,KAQTC,EAAWJ,IAAOC,IAAV,KAuBRI,EAAWL,IAAOM,IAAV,KAURC,EAAWP,IAAOC,IAAV,KCxCfO,EAAY,CAAC,OAAQ,QAAS,0BAmFrBC,EAjFF,WAAO,IAAD,EACeC,mBAAS,MADxB,mBACVC,EADU,KACAC,EADA,KAOjB,OAJAC,qBAAU,WACRD,EAAYJ,EAAUM,KAAKC,MAAMD,KAAKE,SAAWR,EAAUS,YAC1D,IAGD,kBAAClB,EAAD,KACE,kBAACQ,EAAD,KACE,kBAACW,EAAA,EAAD,CAAMC,WAAS,GACb,kBAACD,EAAA,EAAD,CAAME,GAAI,GAAIC,GAAI,GAChB,kBAAChB,EAAD,CAAUiB,IAAKC,IAAMC,MAAO,OAE9B,kBAACN,EAAA,EAAD,CAAME,GAAI,GAAIC,GAAI,GAChB,kBAACnB,EAAD,cAEE,6BAFF,sBAKA,kBAACE,EAAD,KACE,mDAAyBO,EAAzB,KACA,oGAIA,4BACE,uBAAGc,KAAK,wCAAR,cAEF,4BACE,uBAAGA,KAAK,mCAAR,mBAEF,4BACE,uBAAGA,KAAK,+CAAR,gBAIF,4BACE,uBAAGA,KAAK,oCAAR,yCCtCDC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f507ef25.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Bemio.5db8bbfb.otf\";","module.exports = __webpack_public_path__ + \"static/media/Apercu.52448f2d.woff\";","module.exports = __webpack_public_path__ + \"static/media/Apercu.21c5c0d9.woff2\";","module.exports = __webpack_public_path__ + \"static/media/logo.2927903d.png\";","import { createGlobalStyle } from \"styled-components\";\r\nimport Bemio from \"./Bemio.otf\";\r\nimport ApercuWoff from \"./Apercu.woff\";\r\nimport ApercuWoff2 from \"./Apercu.woff2\";\r\n\r\nexport default createGlobalStyle`\r\n@font-face {\r\n    font-family: 'Bemio';\r\n    src: local('Bemio'),\r\n    url(${Bemio}) format(\"opentype\");\r\n    font-weight: normal;\r\n    font-style: normal;\r\n\r\n}    \r\n@font-face {\r\n    font-family: 'Apercu';\r\n    src: local('Apercu'),\r\n    url(${ApercuWoff2}) format('woff2'),\r\n    url(${ApercuWoff}) format('woff');\r\n    font-weight: 300;\r\n    font-style: normal;\r\n}\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const HomeWrapper = styled.div`\r\n  background-color: #384b87;\r\n  height: 100vh;\r\n  color: #f49c77;\r\n  display: flex;\r\n  justify-content: center;\r\n`;\r\n\r\nexport const HomeTitle = styled.h1`\r\n  font-family: \"Bemio\";\r\n  font-size: 48px;\r\n  font-weight: 300;\r\n  font-style: normal;\r\n  padding: 0 4px 0 4px;\r\n`;\r\n\r\nexport const HomeBody = styled.div`\r\n  font-family: \"Apercu\";\r\n  padding: 0 4px 0 4px;\r\n\r\n  h3 {\r\n    font-weight: 200;\r\n  }\r\n  h5 {\r\n    font-weight: 250;\r\n    font-size: 18px;\r\n  }\r\n  a:link,\r\n  a:visited {\r\n    color: #f49c77;\r\n    text-decoration: underline;\r\n  }\r\n  a:hover,\r\n  a:active {\r\n    background-color: #f49c77;\r\n    color: #384b87;\r\n  }\r\n`;\r\n\r\nexport const HomeLogo = styled.img`\r\n  max-width: 100%;\r\n  text-align: center;\r\n  height: auto;\r\n  padding: 2em;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  display: block;\r\n`;\r\n\r\nexport const HomeGrid = styled.div`\r\n  // margin: auto\r\n  // width: 70%;\r\n`;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Button } from \"@material-ui/core\";\r\nimport logo from \"./logo.png\";\r\nimport {\r\n  HomeTitle,\r\n  HomeLogo,\r\n  HomeBody,\r\n  HomeWrapper,\r\n  HomeGrid,\r\n} from \"./index.style\";\r\n\r\nconst nicknames = [\"Juju\", \"Julen\", \"Beep Boop Computer Man\"];\r\n\r\nconst Home = () => {\r\n  const [nickname, setNickname] = useState(null);\r\n\r\n  useEffect(() => {\r\n    setNickname(nicknames[Math.floor(Math.random() * nicknames.length)]);\r\n  }, []);\r\n\r\n  return (\r\n    <HomeWrapper>\r\n      <HomeGrid>\r\n        <Grid container>\r\n          <Grid xs={12} sm={5}>\r\n            <HomeLogo src={logo} width={275} />\r\n          </Grid>\r\n          <Grid xs={12} sm={7}>\r\n            <HomeTitle>\r\n              Hello!\r\n              <br />\r\n              I'm Julian Zabala.\r\n            </HomeTitle>\r\n            <HomeBody>\r\n              <h3>Some people call me {nickname}.</h3>\r\n              <p>\r\n                I'm a software engineer obsessed with cameras, keyboards, and my\r\n                cat.\r\n              </p>\r\n              <h5>\r\n                <a href=\"https://www.linkedin.com/in/jzabala/\">LinkedIn </a>\r\n              </h5>\r\n              <h5>\r\n                <a href=\"https://codejulen.github.io/art\">Photo Projects</a>\r\n              </h5>\r\n              <h5>\r\n                <a href=\"https://www.youtube.com/watch?v=5oVLvP8wAqU\">\r\n                  Short Films\r\n                </a>\r\n              </h5>\r\n              <h5>\r\n                <a href=\"https://codejulen.github.io/dish\">\r\n                  Project: Dishcord Movie Nights\r\n                </a>\r\n              </h5>\r\n            </HomeBody>\r\n          </Grid>\r\n        </Grid>\r\n      </HomeGrid>\r\n    </HomeWrapper>\r\n  );\r\n  //     return (<div>      <div class=\"logo\">\r\n  //     <img src=\"public/logo-color.png\" />\r\n  //   </div>\r\n  //   <div class=\"right-text\">\r\n  //     <h1>Hello! I'm Julian Zabala.</h1>\r\n  //     <h3>\r\n  //       Some people call me <span id=\"nickname\"></span>.\r\n  //     </h3>\r\n  //     <p>\r\n  //       I'm a software engineer obsessed with cameras, keyboards, and my cat.\r\n  //     </p>\r\n  //     <h5>\r\n  //       <a href=\"https://www.linkedin.com/in/jzabala/\">\r\n  //         Professional Worky-Work Beep Boop Stuff\r\n  //       </a>\r\n  //     </h5>\r\n  //     <h5>\r\n  //       <a href=\"https://codejulen.github.io/art\">To See With My Eyes</a>\r\n  //     </h5>\r\n  //     <h5>\r\n  //       <a href=\"https://www.instagram.com/marble_tofu/\">My Favorite Cat</a>\r\n  //     </h5>\r\n  //     <h5>\r\n  //       <a href=\"https://www.youtube.com/watch?v=5oVLvP8wAqU\">\r\n  //         Inner Monologuing On The Outside\r\n  //       </a>\r\n  //     </h5>\r\n  //     <h5>\r\n  //       <a href=\"https://codejulen.github.io/dish\">Dishcord Movie Nights</a>\r\n  //     </h5>\r\n  //   </div>)\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\nimport GlobalFonts from \"./fonts/fonts\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GlobalFonts />\n      <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}